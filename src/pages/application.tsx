import Head from "next/head";
import { useState } from "react";
import Header from "@/components/Header";
import styles from '@/styles/Application.module.css';
import Steps from "@/components/Steps";
import Footer from "@/components/Footer";
import { questions } from "../../data/questions";
import { answers } from "../../data/answers"; 
import Radio from "@/components/Radio";

export default function Application() {
    const [currentStep, setCurrentStep] = useState(0);
    const [formData, setFormData] = useState<Array<{ [key: string]: string }>>(Array(questions.length).fill({}));

    const handleNextStep = () => {
        setCurrentStep(currentStep + 1);
    }

    const handlePrevStep = () => {
        setCurrentStep(currentStep - 1);
    }

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>, questionIndex: number) => {
        const { name, value } = e.target;
        setFormData(prevFormData => {
            const newFormData = [...prevFormData];
            newFormData[currentStep] = {
                ...newFormData[currentStep],
                [name]: value
            };
            return newFormData;
        });
    };

    const handleRadioChange = (questionIndex: number, value: string) => {
        setFormData(prevFormData => {
            const newFormData = [...prevFormData];
            newFormData[currentStep] = {
                ...newFormData[currentStep],
                radio: value
            };
            return newFormData;
        });
    };

    const isLastStep = currentStep === questions.length - 1;

    return (
        <>
            <Head>
                <title>haven | application</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/assets/haven-favi.svg" />
            </Head>

            <main className={styles.main}>
                <div className={styles.header}>
                    <Header />
                </div>
                <div className={styles.stepsContainer}>
                    <Steps currentStep={currentStep} />
                    <div className={styles.formContainer}>
                        <p className={styles.formHeader}>Adoption Application</p>
                        <p className={styles.subHeader}>Start the process to welcoming your new family member.</p>
                        <div className={styles.inputContainer}>
                            {questions[currentStep].map((question, index) => (
                                <div key={index} className={styles.input}>
                                    <label className={styles.prompt}>{question}*</label>
                                    {currentStep !== 2 ? (
                                        <input 
                                            className={styles.type} 
                                            type="text" 
                                            id={question.toLowerCase().replace(/\s/g, "-")} 
                                            name={question.toLowerCase().replace(/\s/g, "-")} 
                                            onChange={(e) => handleInputChange(e, index)}
                                            value={formData[currentStep][question.toLowerCase().replace(/\s/g, "-")] || ''}
                                        />
                                    ) : (
                                        <Radio
                                            options={answers[index]}
                                            questionIndex={index}
                                            onSelect={(value: string) => handleRadioChange(index, value)} 
                                            selectedValue={formData[currentStep].radio || ''}
                                        /> 
                                    )}
                                </div>
                            ))}
                        </div>
                        <div className={styles.buttonContainer}>
                            {currentStep > 0 && <button onClick={handlePrevStep} className={styles.backBtn}>Back</button>}
                            {isLastStep ? (
                                <button onClick={handleNextStep} className={styles.nextBtn}>Finish</button>
                            ) : (
                                <button onClick={handleNextStep} className={styles.nextBtn}>Next</button>
                            )}
                        </div>
                    </div>
                </div>

                <footer className={styles.footer}>
                    <Footer />
                </footer>
            </main>
        </>
    )
}
